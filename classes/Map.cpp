#include "Map.h"
#include "TextureManager.h"

int level[26][30] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 1, 0 ,0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 1, 1, 1 ,0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 0, 0, 1 ,1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 1 ,1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 0, 0, 0 ,0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 1, 1, 1, 0, 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1 ,0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1 ,0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1 ,0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1 ,0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 1 ,0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 0 ,0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 1, 0, 0, 0 ,0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};


Map::Map()
{
    grass = TextureManager::load("./assets/grass.png");
    stone = TextureManager::load("./assets/stone.png");

    load(level);

    src.x = src.y = 0;
    dest.x = dest.y = 0;
    src.h = src.w = dest.h = dest.w = 32;
}

Map::~Map()
{}

void Map::load(int arr[26][30])
{
    for (int row = 0; row < 26; ++row)
        for (int col = 0; col < 30; ++col)
            map[row][col] = arr[row][col];
}

void Map::draw()
{
    int type = 0;

    for (int row = 0; row < 26; ++row)
        for (int col = 0; col < 30; ++col) {
            type = map[row][col];

            dest.x = col * 32;
            dest.y = row * 32;

            switch (type) {
                case 0:
                    TextureManager::draw(grass, src, dest);
                    break;
                case 1:
                    TextureManager::draw(stone, src, dest);
                    break;
                default:
                    break;
            }
        }
}

bool Map::checkCollision(SDL_Rect rect)
{
    int row, col;

    // top left dot
    col = (rect.x + 14 + 1) / 32;
    row = (rect.y + 6 + 1) / 32;
    if (map[row][col] == 1){
        return true;
    }
    // center left dot
    col = (rect.x + 14 + 1) / 32;
    row = (rect.y + rect.h/2) / 32;
    if (map[row][col] == 1){
        return true;
    }
    // top right dot
    col = (rect.x + rect.w - 24 - 1) / 32;
    row = (rect.y + 6 + 1) / 32;
    if (map[row][col] == 1){
        return true;
    }
    // center right dot
    col = (rect.x + rect.w - 24 - 1) / 32;
    row = (rect.y + rect.h/2 + 1) / 32;
    if (map[row][col] == 1){
        return true;
    }
    // bottom left dot
    col = (rect.x + 14 + 1) / 32;
    row = (rect.y + rect.h - 4 - 1) / 32;
    if (map[row][col] == 1){
        return true;
    }
    // bottom right dot
    col = (rect.x + rect.w - 24 - 1) / 32;
    row = (rect.y + rect.h - 4 - 1) / 32;
    if (map[row][col] == 1){
        return true;
    }

    return false;
}
